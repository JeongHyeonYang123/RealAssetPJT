<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.home.mapper.CommentMapper">

    <insert id="insertComment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO comments (post_id, author_mno, author_name, content, parent_id, depth, created_at, updated_at, likes, is_deleted)
        VALUES (#{postId}, #{authorMno}, #{authorName}, #{content}, #{parentId}, #{depth}, NOW(), NOW(), 0, FALSE)
    </insert>

    <select id="selectCommentById" resultType="CommentDto">
        SELECT
            id, post_id as postId, author_mno as authorMno, author_name as authorName,
            content, parent_id as parentId, depth, created_at as createdAt,
            updated_at as updatedAt, likes, is_deleted as isDeleted
        FROM comments
        WHERE id = #{id} AND is_deleted = FALSE
    </select>

    <select id="selectCommentsByPostId" resultType="CommentDto">
        SELECT
            id, post_id as postId, author_mno as authorMno, author_name as authorName,
            content, parent_id as parentId, depth, created_at as createdAt,
            updated_at as updatedAt, likes, is_deleted as isDeleted
        FROM comments
        WHERE post_id = #{postId} AND is_deleted = FALSE
        ORDER BY
            CASE WHEN parent_id IS NULL THEN id ELSE parent_id END,
            depth,
            created_at ASC
    </select>

    <select id="selectCommentsByAuthor" resultType="CommentDto">
        SELECT
        id, post_id as postId, author_mno as authorMno, author_name as authorName,
        content, parent_id as parentId, depth, created_at as createdAt,
        updated_at as updatedAt, likes, is_deleted as isDeleted
        FROM comments
        WHERE author_mno = #{authorMno} AND is_deleted = FALSE
        ORDER BY created_at DESC
        <if test="limit != null and offset != null">
            LIMIT #{limit} OFFSET #{offset}
        </if>
    </select>

    <!-- ✅ 추가: 내가 작성한 댓글 조회 (게시글 정보 포함) -->
    <select id="selectUserCommentsWithPost" resultType="CommentWithPostDto">
        SELECT
        c.id,
        c.post_id as postId,
        c.author_mno as authorMno,
        c.author_name as authorName,
        c.content,
        c.parent_id as parentId,
        c.depth,
        c.created_at as createdAt,
        c.updated_at as updatedAt,
        c.likes,
        c.is_deleted as isDeleted,

        -- 게시글 정보 추가
        p.title as postTitle,
        p.category as postCategory,
        p.author_mno as postAuthorMno,
        p.author_name as postAuthorName,
        p.content as postContent

        FROM comments c
        LEFT JOIN posts p ON c.post_id = p.id
        WHERE c.author_mno = #{authorMno,jdbcType=INTEGER}
        AND c.is_deleted = FALSE
        AND p.is_deleted = FALSE
        ORDER BY c.created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- ✅ 추가: 내가 작성한 댓글 수 조회 -->
    <select id="countUserCommentsWithPost" resultType="Integer">
        SELECT COUNT(*)
        FROM comments c
        LEFT JOIN posts p ON c.post_id = p.id
        WHERE c.author_mno = #{authorMno,jdbcType=INTEGER}
        AND c.is_deleted = FALSE
        AND p.is_deleted = FALSE
    </select>

    <update id="updateComment">
        UPDATE comments
        <set>
            <if test="content != null">content = #{content},</if>
            updated_at = NOW()
        </set>
        WHERE id = #{id} AND is_deleted = FALSE
    </update>

    <update id="deleteComment">
        UPDATE comments SET is_deleted = TRUE, updated_at = NOW() WHERE id = #{id}
    </update>

    <select id="countCommentsByPostId" resultType="Integer">
        SELECT COUNT(*) FROM comments WHERE post_id = #{postId} AND is_deleted = FALSE
    </select>

    <select id="countCommentsByAuthor" resultType="Integer">
        SELECT COUNT(*) FROM comments WHERE author_mno = #{authorMno,jdbcType=INTEGER} AND is_deleted = FALSE
    </select>

</mapper>
