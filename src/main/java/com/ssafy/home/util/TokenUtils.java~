package com.ssafy.home.util;

import com.ssafy.home.domain.User;
import io.jsonwebtoken.*;
import io.jsonwebtoken.security.Keys;
import lombok.extern.log4j.Log4j2;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.nio.charset.StandardCharsets;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * JWT의 구성요소를 생성하고 최종적으로 JWT를 생성하여 유효성을 체크하는 유틸입니다.
 */
@Log4j2
@Component
public class TokenUtils {
    private static SecretKey JWT_SECRET_KEY;

    // JWT_SECRET_KEY 변수값에 환경 변수에서 불러온 SECRET_KEY를 주입합니다.
    public TokenUtils(@Value("${jwt.secret}") String jwtSecretKey) {
        TokenUtils.JWT_SECRET_KEY = Keys.hmacShaKeyFor(jwtSecretKey.getBytes(StandardCharsets.UTF_8));
    }

    /**
     * '토큰의 만료기간'을 지정하는 메서드
     *
     * @param isAccessToken : AccessToken 인지 여부
     * @return {Date} Calendar
     */
    private static Date createExpiredDate(boolean isAccessToken) {
        Calendar calendar = Calendar.getInstance();
        if (isAccessToken) {
            calendar.add(Calendar.MINUTE, 1);  // Access Token은 15분
        } else {
            calendar.add(Calendar.DATE, 7); // Refresh Token은 7일
        }
        return calendar.getTime();
    }

    /**
     * JWT의 '헤더' 값을 생성해주는 메서드
     *
     * @return HashMap<String, Object>
     */
    private static Map<String, Object> createHeader() {
        return Jwts.header()
                .add("typ", "JWT")
                .add("alg", "HS256")
                .add("regDate", System.currentTimeMillis()).build();
    }

    /**
     * '사용자 정보' 기반으로 'Claims' 생성하는 메서드
     *
     * @param user          사용자 정보
     * @param isAccessToken : AccessToken 인지 여부
     * @return Map<String, Object>
     */
    private static Map<String, Object> createClaims(User user, boolean isAccessToken) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("userEmail", user.getEmail());

        if (isAccessToken) {
            // Access Token에만 추가 정보 포함
            claims.put("userName", user.getName());
            log.info("userName : " + user.getName());
        }

        log.info("userEmail : " + user.getEmail());
        return claims;
    }

    /**
     * 토큰을 기반으로 유효한 토큰인지 여부를 반환해주는 메서드
     * - Claim 내에서 사용자 정보를 추출합니다.
     *
     * @param token String  : 토큰
     * @return boolean      : 유효한지 여부 반환
     */
    public static boolean isValidToken(String token) {
        try {
            Claims claims = getTokenToClaims(token);
            log.info("expireTime :" + claims.getExpiration());
            log.info("userEmail :" + claims.get("userEmail"));
            if (claims.get("userName") != null) {
                log.info("userName :" + claims.get("userName"));
            }
            return true;
        } catch (ExpiredJwtException exception) {
            log.debug("token expired " + token);
            log.error("Token Expired", exception);
            return false;
        } catch (JwtException exception) {
            log.debug("token tampered " + token);
            log.error("Token Tampered", exception);
            return false;
        } catch (NullPointerException exception) {
            log.debug("token is null " + token);
            log.error("Token is null", exception);
            return false;
        }
    }

    /**
     * 토큰이 만료되었는지 확인하는 메서드
     *
     * @param token String : 토큰
     * @return boolean     : 만료 여부
     */
    public static boolean isExpiredToken(String token) {
        try {
            Claims claims = getTokenToClaims(token);
            return claims.getExpiration().before(new Date());
        } catch (ExpiredJwtException exception) {
            return true;
        } catch (Exception e) {
            return true;
        }
    }

    /**
     * 사용자 정보를 기반으로 Access Token을 생성하여 반환하는 메서드
     *
     * @param user User : 사용자 정보
     * @return String : 토큰
     */
    public static String generateJwtToken(User user) {
        log.debug("생성된 JWT Secret Key: " + JWT_SECRET_KEY);
        // 사용자 시퀀스를 기준으로 JWT 토큰을 발급하여 반환해줍니다.
        JwtBuilder builder = Jwts.builder()
                .setHeader(createHeader())                              // Header 구성
                .claims(createClaims(user, true))                       // Payload - Claims 구성 (Access Token)
                .subject(String.valueOf(user.getMno()))                 // Payload - Subject 구성
                .signWith(JWT_SECRET_KEY)                               // Signature 구성
                .expiration(createExpiredDate(true));                   // Expired Date 구성 (Access Token)
        return builder.compact();
    }

    /**
     * 이메일 정보만으로 Access Token을 생성하는 메서드 (Refresh Token 사용 시)
     *
     * @param email String : 사용자 이메일
     * @return String : 토큰
     */
    public static String generateJwtToken(String email) {
        log.debug("이메일로 JWT 토큰 생성: " + email);

        // 임시 User 객체 생성 (이메일만 포함)
        User tempUser = new User();
        tempUser.setEmail(email);
        tempUser.setMno(0); // 실제 mno는 알 수 없으므로 임시값 설정

        return generateJwtToken(tempUser);
    }

    /**
     * Refresh Token을 생성하는 메서드
     *
     * @param user User : 사용자 정보
     * @return String : Refresh 토큰
     */
    public static String generateRefreshToken(User user) {
        log.debug("JWT Secret Key: {}", JWT_SECRET_KEY);
        return Jwts.builder()
                .setHeader(createHeader())
                .claims(createClaims(user, false))                      // Refresh Token은 최소한의 정보만 포함
                .subject(String.valueOf(user.getMno()))
                .signWith(JWT_SECRET_KEY)
                .expiration(createExpiredDate(false))                   // Refresh Token 만료 기간
                .compact();
    }

    /**
     * 'Header' 내에서 'Token' 정보를 반환하는 메서드
     *
     * @param header 헤더
     * @return String
     */
    public static String getHeaderToToken(String header) {
        return header.split(" ")[1];
    }

    /**
     * 'JWT' 내에서 'Claims' 정보를 반환하는 메서드
     *
     * @param token : 토큰
     * @return Claims : Claims
     */
    private static Claims getTokenToClaims(String token) {
        System.out.println("token : " + token);
        System.out.println("JWT_SECRET_KEY : " + JWT_SECRET_KEY);
        return Jwts.parser()
                .verifyWith(JWT_SECRET_KEY)
                .build()
                .parseSignedClaims(token)
                .getPayload();
    }

    /**
     * 'Claims' 내에서 '사용자 이메일'을 반환하는 메서드
     *
     * @param token : 토큰
     * @return String : 사용자 이메일
     */
    public static String getClaimsToUserEmail(String token) {
        Claims claims = getTokenToClaims(token);
        return claims.get("userEmail").toString();
    }

    /**
     * 'Claims' 내에서 토큰을 기반으로 사용자 정보를 반환하는 메서드
     *
     * @param token : 토큰
     * @return User : 사용자 기본 정보
     */
    public static User getClaimsToUser(String token) {
        Claims claims = getTokenToClaims(token);
        User user = new User();
        user.setEmail(claims.get("userEmail").toString());

        if (claims.get("userName") != null) {
            user.setName(claims.get("userName").toString());
        }

        return user;
    }

    /**
     * 토큰의 유효성과 만료 여부를 함께 검사하는 메서드
     *
     * @param token : 토큰
     * @return Map<String, Object> : 유효성 검사 결과
     */
    public static Map<String, Object> validateToken(String token) {
        Map<String, Object> result = new HashMap<>();

        try {
            Claims claims = getTokenToClaims(token);
            result.put("isValid", true);
            result.put("userEmail", claims.get("userEmail"));
            return result;
        } catch (ExpiredJwtException exception) {
            result.put("isValid", false);
            result.put("errorCode", "TOKEN_EXPIRED");
            return result;
        } catch (JwtException exception) {
            result.put("isValid", false);
            result.put("errorCode", "TOKEN_INVALID");
            return result;
        } catch (NullPointerException exception) {
            result.put("isValid", false);
            result.put("errorCode", "TOKEN_NULL");
            return result;
        }
    }
}
