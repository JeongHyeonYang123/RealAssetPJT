package com.ssafy.home.service;

import com.ssafy.home.domain.User;
import com.ssafy.home.dto.UserDetailsDTO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.AuthenticationServiceException;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.stereotype.Service;

import java.util.Collections;
import java.util.Optional;

/**
 * UserDetailsService 구현체
 * 사용자 인증 정보를 로드하고 UserDetails 객체를 생성하는 역할을 담당
 */
@Service
public class UserDetailsServiceImpl implements UserDetailsService {

    private final Logger log = LoggerFactory.getLogger(UserDetailsServiceImpl.class);

    private final UserService userService;

    public UserDetailsServiceImpl(UserService userService) {
        this.userService = userService;
    }

    /**
     * 사용자 ID를 받아 해당 사용자의 인증 정보를 로드합니다.
     */
    @Override
    public UserDetails loadUserByUsername(String userEmail) {
        log.debug("[USERDETAILS] 이메일: {}", userEmail);

        // [STEP1] 사용자 아이디를 조회하여 존재하지 않는 경우 오류를 반환합니다.
        if (userEmail == null || userEmail.isEmpty()) {
            throw new AuthenticationServiceException("사용자 Email이 비어있습니다.");
        }

        // [STEP2] 서비스를 호출하여 실제 데이터베이스 조회를 통해서 사용자 정보를 조회합니다.
        Optional<User> userOpt = userService.findByEmail(userEmail);
        if (userOpt.isPresent()) {
            log.debug("[USERDETAILS] DB 유저 패스워드(해시): {}", userOpt.get().getPassword());
        } else {
            log.debug("[USERDETAILS] 해당 이메일의 유저 없음");
        }
        return userOpt
                .map(user -> new UserDetailsDTO(
                        user,
                        Collections.singleton(
                                new SimpleGrantedAuthority(
                                        user.getGrade().equalsIgnoreCase("admin")
                                                ? "ADMIN"
                                                : "USER"
                                )
                        )
                ))
                .orElseThrow(() -> new BadCredentialsException("인증 실패: " + userEmail));
    }
}